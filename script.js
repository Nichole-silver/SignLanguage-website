let video = null;
let canvas = null;
let cameraResultEl = null;
let stream = null;

// G√°n DOM sau khi to√†n b·ªô trang ƒë√£ load
window.addEventListener('DOMContentLoaded', () => {
    video = document.getElementById('camera-feed');
    canvas = document.getElementById('camera-canvas');
    cameraResultEl = document.getElementById('camera-result');
});

// H√†m 1: m·ªü camera v√† hi·ªÉn th·ªã th√¥ng b√°o
async function startCamera() {
    if (!video || !cameraResultEl) {
        console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ video ho·∫∑c cameraResultEl.");
        return;
    }

    try {
        // Y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera tr∆∞·ªõc
        stream = await navigator.mediaDevices.getUserMedia({
            video: { facingMode: 'user' }, // 'user' l√† camera tr∆∞·ªõc
            audio: false
        });

        // G·∫Øn lu·ªìng camera v√†o th·∫ª video
        video.srcObject = stream;
        await video.play();

        // Th√¥ng b√°o th√†nh c√¥ng
        cameraResultEl.innerHTML = `
            <div class="testapi-label" style="color: green; font-weight: bold;">
                ‚úÖ Camera ƒë√£ s·∫µn s√†ng. H√£y nh·∫•n "Ch·ª•p ·∫£nh".
            </div>
        `;
        console.log("Camera ƒë√£ s·∫µn s√†ng.");
    } catch (err) {
        // Th√¥ng b√°o l·ªói n·∫øu kh√¥ng m·ªü ƒë∆∞·ª£c camera
        console.error("L·ªói khi m·ªü camera:", err);
        cameraResultEl.innerHTML = `
            <div class="testapi-result-block" style="color:#d32f2f; font-weight: bold;">
                ‚ùå Kh√¥ng th·ªÉ truy c·∫≠p camera: ${err.message}
            </div>
        `;
    }
}


// H√†m 2: Ch·ª•p ·∫£nh
function captureImage() {
    if (!video || !canvas || !cameraResultEl) {
        cameraResultEl.classList.add('active');
        cameraResultEl.innerHTML = '<div class="testapi-result-block" style="color:#d32f2f">Ch∆∞a kh·ªüi t·∫°o camera ho·∫∑c canvas.</div>';
        return;
    }

    // G·ª£i √Ω chu·∫©n b·ªã
    cameraResultEl.classList.add('active');
    cameraResultEl.innerHTML = `
        <div class="testapi-label" style="color: #f57c00; font-weight: bold;">
            üïê H√£y chu·∫©n b·ªã ƒë·ªông t√°c tay. M√°y s·∫Ω ch·ª•p sau <strong>5 gi√¢y</strong>...
        </div>
    `;

    const countdownEl = document.getElementById('countdown-overlay');
    let count = 5;
    countdownEl.style.display = 'block';
    countdownEl.textContent = count;

    const countdownInterval = setInterval(() => {
        count--;
        if (count > 0) {
            countdownEl.textContent = count;
        } else {
            clearInterval(countdownInterval);
            countdownEl.style.display = 'none';

            // Ch·ª•p ·∫£nh
            const ctx = canvas.getContext('2d');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            capturedImageData = canvas.toDataURL('image/png');

            // Hi·ªÉn th·ªã ·∫£nh ch·ª•p
            cameraResultEl.innerHTML = `
                <div class="testapi-label" style="color: green; font-weight: bold;">‚úÖ ·∫¢nh v·ª´a ch·ª•p:</div>
                <img src="${capturedImageData}" style="max-width:200px;max-height:200px;border-radius:8px;box-shadow:0 2px 8px #0002;">
                <div class="testapi-label" style="margin-top:8px;">Nh·∫•n "G·ª≠i v√† d·ªãch" ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£.</div>
            `;
        }
    }, 1000); // m·ªói gi√¢y gi·∫£m 1
}


// H√†m 3: G·ª≠i ·∫£nh v√† d·ªãch
async function captureAndTranslate() {
    if (!capturedImageData) {
        cameraResultEl.innerHTML = `<div class="testapi-result-block" style="color:#d32f2f">B·∫°n ch∆∞a ch·ª•p ·∫£nh n√†o. H√£y nh·∫•n "Ch·ª•p ·∫£nh" tr∆∞·ªõc.</div>`;
        return;
    }

    try {
        cameraResultEl.innerHTML = '<div class="testapi-label">Xin ch·ªù gi√¢y l√°t...</div>';

        const response = await fetch('https://hcl-1-1q5z.onrender.com/detect_image', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                image: capturedImageData.split(',')[1]
            })
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`L·ªói m√°y ch·ªß: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        let letter = data.letter || "Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c k√Ω hi·ªáu";
        let confidence = data.confidence !== undefined ? (data.confidence * 100).toFixed(1) : null;
        let outputClass = (letter === "Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c k√Ω hi·ªáu") ? "normal" : "large";

        cameraResultEl.innerHTML = `
            <div class="testapi-label">K√Ω hi·ªáu:</div>
            <div class="testapi-output ${outputClass}">${letter}</div>
            ${confidence !== null ? `<div class="testapi-confidence">ƒê·ªô ch√≠nh x√°c: <span>${confidence}%</span></div>` : ""}
        `;

    } catch (error) {
        cameraResultEl.innerHTML = `<div class="testapi-result-block" style="color:#d32f2f">L·ªói: ${error.message}</div>`;
    }
}

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi trang ƒë∆∞·ª£c load
document.addEventListener('DOMContentLoaded', function () {
    initDictionary();
    initTestAPI();
    initNavigation();
    initLessons();
    initDictionary();
    initPracticeArea();
    loadUserProgress();
    updateProgressDisplay();
    renderLessonsByCategory();

    // G√°n ph·∫ßn t·ª≠ camera
    video = document.getElementById('camera-feed');
    canvas = document.getElementById('camera-canvas');
    cameraResultEl = document.getElementById('camera-result');

    // X·ª≠ l√Ω Test API
    const fileInput = document.getElementById('testapi-fileInput');
    const sendBtn = document.getElementById('testapi-sendBtn');
    const resultEl = document.getElementById('testapi-result');
    const previewEl = document.getElementById('testapi-preview');

    if (fileInput && sendBtn && resultEl && previewEl) {
        // Hi·ªÉn th·ªã preview ·∫£nh
        fileInput.addEventListener('change', function () {
            previewEl.innerHTML = '';
            if (fileInput.files.length) {
                const file = fileInput.files[0];
                const reader = new FileReader();
                reader.onload = (e) => {
                    previewEl.innerHTML = `<img src="${e.target.result}" style="max-width:200px;max-height:200px;border-radius:8px;box-shadow:0 2px 8px #0002;">`;
                };
                reader.readAsDataURL(file);
            }
        });

        function toBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = () => resolve(reader.result);
                reader.onerror = error => reject(error);
            });
        }

        sendBtn.addEventListener('click', async () => {
            if (!fileInput.files.length) {
                alert('Vui l√≤ng ch·ªçn m·ªôt ·∫£nh ƒë·ªÉ g·ª≠i!');
                return;
            }

            const file = fileInput.files[0];
            try {
                resultEl.textContent = 'ƒêang g·ª≠i ·∫£nh l√™n API...';
                const base64Image = await toBase64(file);

                const response = await fetch('https://hcl-1-1q5z.onrender.com/detect_image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ image: base64Image.split(',')[1] })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server tr·∫£ v·ªÅ l·ªói: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                let letter = data.letter || "Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c k√Ω hi·ªáu";
                let confidence = data.confidence !== undefined ? (data.confidence * 100).toFixed(1) : null;
                let outputClass = (letter === "Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c k√Ω hi·ªáu") ? "normal" : "large";

                resultEl.innerHTML = `
                    <div class="testapi-label">K√Ω hi·ªáu:</div>
                    <div class="testapi-output ${outputClass}">${letter}</div>
                    ${confidence !== null ? `<div class="testapi-confidence">ƒê·ªô ch√≠nh x√°c: <span>${confidence}%</span></div>` : ""}
                `;

            } catch (error) {
                resultEl.innerHTML = `<div class="testapi-result-block" style="color:#d32f2f">L·ªói: ${error.message}</div>`;
            }
        });
    }
});

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu
const appData = {
    completedLessons: [],
    practiceScores: [],
    recentActivities: [],
    currentQuizIndex: 0,
    currentQuizScore: 0,
    quizQuestions: [],
    flashcardIndex: 0,
    flashcardDeck: []
};

// D·ªØ li·ªáu b√†i h·ªçc ƒë·∫ßy ƒë·ªß
const lessonData = {
    alphabet: [
        { id: 'lesson-a', title: 'Ch·ªØ A', image: 'A-Z/a.png', description: 'N·∫Øm ch·∫∑t b√†n tay, ch·ªâ ƒë·ªÉ ng√≥n c√°i d·ª±ng ƒë·ª©ng.', english: 'A', category: 'alphabet' },
        { id: 'lesson-b', title: 'Ch·ªØ B', image: 'A-Z/b.png', description: 'Du·ªói th·∫≥ng 4 ng√≥n tay v√† kh√©p l·∫°i, ng√≥n c√°i g·∫≠p v√†o l√≤ng b√†n tay.', english: 'B', category: 'alphabet' },
        { id: 'lesson-c', title: 'Ch·ªØ C', image: 'A-Z/c.png', description: 'U·ªën cong b√†n tay t·∫°o h√¨nh ch·ªØ C.', english: 'C', category: 'alphabet' },
        { id: 'lesson-d', title: 'Ch·ªØ D', image: 'A-Z/d.png', description: 'Ng√≥n tr·ªè du·ªói th·∫≥ng, c√°c ng√≥n kh√°c kh√©p l·∫°i ch·∫°m ng√≥n c√°i.', english: 'D', category: 'alphabet' },
        { id: 'lesson-e', title: 'Ch·ªØ E', image: 'A-Z/e.png', description: 'T·∫•t c·∫£ c√°c ng√≥n tay kh√©p l·∫°i, ch·∫°m v√†o l√≤ng b√†n tay.', english: 'E', category: 'alphabet' },
        { id: 'lesson-f', title: 'Ch·ªØ F', image: 'A-Z/f.png', description: 'Ng√≥n tr·ªè v√† ng√≥n c√°i ch·∫°m nhau t·∫°o h√¨nh tr√≤n, ba ng√≥n c√≤n l·∫°i du·ªói th·∫≥ng.', english: 'F', category: 'alphabet' },
        { id: 'lesson-g', title: 'Ch·ªØ G', image: 'A-Z/g.png', description: 'Ng√≥n tr·ªè v√† ng√≥n c√°i du·ªói ra, c√°c ng√≥n kh√°c kh√©p l·∫°i.', english: 'G', category: 'alphabet' },
        { id: 'lesson-h', title: 'Ch·ªØ H', image: 'A-Z/h.png', description: 'Ng√≥n tr·ªè v√† ng√≥n gi·ªØa du·ªói th·∫≥ng v√† song song.', english: 'H', category: 'alphabet' },
        { id: 'lesson-i', title: 'Ch·ªØ I', image: 'A-Z/i.png', description: 'Ch·ªâ ng√≥n √∫t du·ªói th·∫≥ng, c√°c ng√≥n kh√°c kh√©p l·∫°i.', english: 'I', category: 'alphabet' },
        { id: 'lesson-j', title: 'Ch·ªØ J', image: 'A-Z/j.png', description: 'T∆∞∆°ng t·ª± ch·ªØ I nh∆∞ng c√≥ chuy·ªÉn ƒë·ªông cong.', english: 'J', category: 'alphabet' },
        { id: 'lesson-k', title: 'Ch·ªØ K', image: 'A-Z/k.png', description: 'Ng√≥n tr·ªè v√† ng√≥n gi·ªØa du·ªói th·∫≥ng t·∫°o h√¨nh ch·ªØ V, ng√≥n c√°i ƒë·∫∑t gi·ªØa.', english: 'K', category: 'alphabet' },
        { id: 'lesson-l', title: 'Ch·ªØ L', image: 'A-Z/l.png', description: 'Ng√≥n tr·ªè v√† ng√≥n c√°i t·∫°o g√≥c vu√¥ng.', english: 'L', category: 'alphabet' },
        { id: 'lesson-m', title: 'Ch·ªØ M', image: 'A-Z/m.png', description: 'Ba ng√≥n tay ƒë·∫ßu kh√©p l·∫°i, ng√≥n c√°i ƒë·∫∑t d∆∞·ªõi.', english: 'M', category: 'alphabet' },
        { id: 'lesson-n', title: 'Ch·ªØ N', image: 'A-Z/n.png', description: 'Hai ng√≥n tay ƒë·∫ßu kh√©p l·∫°i, ng√≥n c√°i ƒë·∫∑t d∆∞·ªõi.', english: 'N', category: 'alphabet' },
        { id: 'lesson-o', title: 'Ch·ªØ O', image: 'A-Z/o.png', description: 'T·∫•t c·∫£ c√°c ng√≥n tay t·∫°o h√¨nh tr√≤n.', english: 'O', category: 'alphabet' },
        { id: 'lesson-p', title: 'Ch·ªØ P', image: 'A-Z/p.png', description: 'T∆∞∆°ng t·ª± ch·ªØ K nh∆∞ng h∆∞·ªõng xu·ªëng d∆∞·ªõi.', english: 'P', category: 'alphabet' },
        { id: 'lesson-q', title: 'Ch·ªØ Q', image: 'A-Z/q.png', description: 'T∆∞∆°ng t·ª± ch·ªØ G nh∆∞ng h∆∞·ªõng xu·ªëng d∆∞·ªõi.', english: 'Q', category: 'alphabet' },
        { id: 'lesson-r', title: 'Ch·ªØ R', image: 'A-Z/r.png', description: 'Ng√≥n tr·ªè v√† ng√≥n gi·ªØa ch√©o nhau.', english: 'R', category: 'alphabet' },
        { id: 'lesson-s', title: 'Ch·ªØ S', image: 'A-Z/s.png', description: 'N·∫Øm tay, ng√≥n c√°i ƒë·∫∑t tr√™n c√°c ng√≥n kh√°c.', english: 'S', category: 'alphabet' },
        { id: 'lesson-t', title: 'Ch·ªØ T', image: 'A-Z/t.png', description: 'Ng√≥n c√°i ƒë·∫∑t gi·ªØa ng√≥n tr·ªè v√† ng√≥n gi·ªØa.', english: 'T', category: 'alphabet' },
        { id: 'lesson-u', title: 'Ch·ªØ U', image: 'A-Z/u.png', description: 'Ng√≥n tr·ªè v√† ng√≥n gi·ªØa du·ªói th·∫≥ng v√† kh√©p l·∫°i.', english: 'U', category: 'alphabet' },
        { id: 'lesson-v', title: 'Ch·ªØ V', image: 'A-Z/v.png', description: 'Ng√≥n tr·ªè v√† ng√≥n gi·ªØa du·ªói th·∫≥ng t√°ch ra t·∫°o h√¨nh ch·ªØ V.', english: 'V', category: 'alphabet' },
        { id: 'lesson-w', title: 'Ch·ªØ W', image: 'A-Z/w.png', description: 'Ba ng√≥n ƒë·∫ßu du·ªói th·∫≥ng t√°ch ra.', english: 'W', category: 'alphabet' },
        { id: 'lesson-x', title: 'Ch·ªØ X', image: 'A-Z/x.png', description: 'Ng√≥n tr·ªè cong nh∆∞ m√≥c c√¢u.', english: 'X', category: 'alphabet' },
        { id: 'lesson-y', title: 'Ch·ªØ Y', image: 'A-Z/y.png', description: 'Ng√≥n c√°i v√† ng√≥n √∫t du·ªói ra, c√°c ng√≥n kh√°c kh√©p l·∫°i.', english: 'Y', category: 'alphabet' },
        { id: 'lesson-z', title: 'Ch·ªØ Z', image: 'A-Z/z.png', description: 'Ng√≥n tr·ªè du·ªói th·∫≥ng v√† v·∫Ω ch·ªØ Z trong kh√¥ng kh√≠.', english: 'Z', category: 'alphabet' }
    ],
    numbers: [
    { id: 'lesson-1', title: 'S·ªë 1', image: '1-10/1.png', description: 'Gi∆° ng√≥n tr·ªè l√™n.', english: 'One', category: 'numbers' },
    { id: 'lesson-2', title: 'S·ªë 2', image: '1-10/2.png', description: 'Gi∆° ng√≥n tr·ªè v√† ng√≥n gi·ªØa.', english: 'Two', category: 'numbers' },
    { id: 'lesson-3', title: 'S·ªë 3', image: '1-10/3.png', description: 'Gi∆° ng√≥n c√°i, ng√≥n tr·ªè v√† ng√≥n gi·ªØa.', english: 'Three', category: 'numbers' },
    { id: 'lesson-4', title: 'S·ªë 4', image: '1-10/4.png', description: 'Gi∆° b·ªën ng√≥n tay, kh√©p ng√≥n c√°i.', english: 'Four', category: 'numbers' },
    { id: 'lesson-5', title: 'S·ªë 5', image: '1-10/5-Photoroom.png', description: 'Du·ªói th·∫≥ng t·∫•t c·∫£ nƒÉm ng√≥n tay.', english: 'Five', category: 'numbers' },
    { id: 'lesson-6', title: 'S·ªë 6', image: '1-10/6-Photoroom.png', description: 'Kh√©p ng√≥n √∫t, du·ªói c√°c ng√≥n kh√°c.', english: 'Six', category: 'numbers' },
    { id: 'lesson-7', title: 'S·ªë 7', image: '1-10/7-Photoroom.png', description: 'Kh√©p ng√≥n √°p √∫t, du·ªói c√°c ng√≥n kh√°c.', english: 'Seven', category: 'numbers' },
    { id: 'lesson-8', title: 'S·ªë 8', image: '1-10/8-Photoroom.png', description: 'Kh√©p ng√≥n gi·ªØa, du·ªói c√°c ng√≥n kh√°c.', english: 'Eight', category: 'numbers' },
    { id: 'lesson-9', title: 'S·ªë 9', image: '1-10/9-Photoroom.png', description: 'Kh√©p ng√≥n tr·ªè, du·ªói c√°c ng√≥n kh√°c.', english: 'Nine', category: 'numbers' },
    { id: 'lesson-10', title: 'S·ªë 10', image: '1-10/10-Photoroom.png', description: 'N·∫Øm tay l·∫°i r·ªìi gi∆° ng√≥n c√°i l√™n.', english: 'Ten', category: 'numbers' }
    ],
    greetings: [
    { id: 'lesson-hello', title: 'Xin Ch√†o', image: 'greeting/hello.png', description: 'M·ªü r·ªông b√†n tay ph·∫£i v·ªõi l√≤ng b√†n tay h∆∞·ªõng v·ªÅ ph√≠a m·∫∑t, ƒë∆∞a l√™n ngang tr√°n v√† v·∫´y nh·∫π t·ª´ tr√°i sang ph·∫£i.', english: 'Hello', category: 'greetings' },
    { id: 'lesson-myname', title: 'T√™n T√¥i L√†', image: 'greeting/mynameis.png', description: 'ƒê·∫∑t b√†n tay ph·∫£i m·ªü r·ªông l√™n ng·ª±c v·ªõi c√°c ng√≥n tay h∆∞·ªõng v·ªÅ ph√≠a c·ªï, sau ƒë√≥ ch·ªâ th·∫≥ng v·ªÅ ph√≠a ng∆∞·ªùi ƒë·ªëi di·ªán b·∫±ng ng√≥n tay tr·ªè.', english: 'My name is', category: 'greetings' },
    { id: 'lesson-thank', title: 'C·∫£m ∆†n', image: 'greeting/thank.png', description: 'ƒê·∫∑t b√†n tay ph·∫£i m·ªü r·ªông v·ªõi l√≤ng b√†n tay h∆∞·ªõng xu·ªëng d∆∞·ªõi, ch·∫°m nh·∫π v√†o m√¥i r·ªìi ƒë∆∞a th·∫≥ng ra ph√≠a tr∆∞·ªõc v·ªÅ h∆∞·ªõng ng∆∞·ªùi ƒë·ªëi di·ªán.', english: 'Thank you', category: 'greetings' },
    { id: 'lesson-sorry', title: 'Xin L·ªói', image: 'greeting/sorry.png', description: 'N·∫Øm tay ph·∫£i th√†nh n·∫Øm ƒë·∫•m, ƒë·∫∑t l√™n ng·ª±c v√† xoay theo chuy·ªÉn ƒë·ªông tr√≤n nh·∫π nh√†ng tr√™n v√πng tim.', english: 'Please/Sorry', category: 'greetings' },
    { id: 'lesson-yes', title: 'C√≥', image: 'greeting/yes.png', description: 'N·∫Øm tay ph·∫£i th√†nh n·∫Øm ƒë·∫•m v·ªõi ng√≥n c√°i du·ªói th·∫≥ng h∆∞·ªõng l√™n tr√™n, g·∫≠t n·∫Øm tay l√™n xu·ªëng nh∆∞ ƒë·ªông t√°c g·∫≠t ƒë·∫ßu.', english: 'Yes', category: 'greetings' },
    { id: 'lesson-no', title: 'Kh√¥ng', image: 'greeting/no.png', description: 'ƒê∆∞a b√†n tay ph·∫£i v·ªõi ng√≥n tay tr·ªè v√† ng√≥n gi·ªØa du·ªói th·∫≥ng, v·∫´y t·ª´ tr√°i sang ph·∫£i ·ªü tr∆∞·ªõc m·∫∑t nh∆∞ ƒë·ªông t√°c l·∫Øc ƒë·∫ßu.', english: 'No', category: 'greetings' },
    { id: 'lesson-love', title: 'T√¥i Y√™u B·∫°n', image: 'greeting/iloveyou.png', description: 'ƒê∆∞a b√†n tay ph·∫£i l√™n v·ªõi ng√≥n c√°i, ng√≥n tr·ªè v√† ng√≥n √∫t du·ªói th·∫≥ng, ng√≥n gi·ªØa v√† ng√≥n √°p √∫t cong xu·ªëng, h∆∞·ªõng v·ªÅ ph√≠a ng∆∞·ªùi ƒë·ªëi di·ªán.', english: 'I love you', category: 'greetings' },
    { id: 'lesson-help', title: 'Gi√∫p ƒê·ª°', image: 'greeting/help.png', description: 'N·∫Øm tay tr√°i th√†nh n·∫Øm ƒë·∫•m v·ªõi ng√≥n c√°i du·ªói l√™n tr√™n, ƒë·∫∑t b√†n tay ph·∫£i m·ªü r·ªông d∆∞·ªõi n·∫Øm tay tr√°i v√† n√¢ng c·∫£ hai tay l√™n tr√™n.', english: 'Help', category: 'greetings' },
    { id: 'lesson-stop', title: 'D·ª´ng L·∫°i', image: 'greeting/stop.png', description: 'ƒê∆∞a b√†n tay th·∫≥ng v·ªÅ ph√≠a tr∆∞·ªõc v·ªõi l√≤ng b√†n tay h∆∞·ªõng ra ngo√†i.', english: 'Stop', category: 'greetings' }
    ],
    people: [
    { id: 'lesson-mother', title: 'M·∫π', image: '/people/mother.png', description: ' ƒê·∫ßu ng√≥n c√°i tay ph·∫£i ch·∫°m v√†o ph·∫ßn d∆∞·ªõi c·ªßa c·∫±m (l√≤ng b√†n tay m·ªü).', english: 'Mother', category: 'people' },
    { id: 'lesson-father', title: 'B·ªë', image: '/people/father.png', description: 'ƒê·∫ßu ng√≥n c√°i tay ph·∫£i ch·∫°m v√†o tr√°n (l√≤ng b√†n tay m·ªü, c√°c ng√≥n x√≤e ra).', english: 'Father', category: 'people' },
    { id: 'lesson-sister', title: 'Ch·ªã/Em g√°i', image: '/people/sister.png', description: 'Ch·∫°m ng√≥n c√°i c·ªßa tay ph·∫£i l√™n c·∫±m (gi·ªëng t·ª´ "girl"), sau ƒë√≥ ƒë∆∞a tay ra tr∆∞·ªõc, k·∫øt th√∫c b·∫±ng ƒë·ªông t√°c hai tay t·∫°o h√¨nh s√∫ng v√† ch·∫°m nhau.', english: 'Sister', category: 'people' },
    { id: 'lesson-brother', title: 'Anh/Em trai', image: '/people/brother.png', description: 'ƒê·∫ßu ng√≥n c√°i tay ph·∫£i ch·∫°m tr√°n (gi·ªëng t·ª´ "boy"), sau ƒë√≥ hai tay t·∫°o h√¨nh s√∫ng v√† ch·∫°m nhau nh∆∞ v·ªõi "sister".', english: 'Brother', category: 'people' },
    { id: 'lesson-grandmother', title: 'B√†', image: '/people/grandma.png', description: 'L√†m d·∫•u ‚Äúmother‚Äù nh∆∞ng tay di chuy·ªÉn ra ph√≠a tr∆∞·ªõc hai l·∫ßn.', english: 'Grandmother', category: 'people' },
    { id: 'lesson-grandfather', title: '√îng', image: '/people/grandpa.png', description: 'L√†m d·∫•u ‚Äúfather‚Äù r·ªìi ƒë·∫©y tay ra ph√≠a tr∆∞·ªõc hai l·∫ßn.', english: 'Grandfather', category: 'people' },
    { id: 'lesson-child-boy', title: 'B√© trai', image: '/people/boy.png', description: 'D√πng tay nh∆∞ ƒëang c·∫ßm m≈© l∆∞·ª°i trai (tay ƒë·∫∑t ·ªü tr√°n, ng√≥n c√°i v√† c√°c ng√≥n m·ªü r·ªông nh∆∞ ƒëang k·∫πp v√† m·ªü).', english: 'Boy', category: 'people' },
    { id: 'lesson-child-girl', title: 'B√© g√°i', image: '/people/girl.png', description: 'N·∫Øm tay l·∫°i, ch√† nh·∫π kh·ªõp ng√≥n c√°i d·ªçc theo c·∫±m (t·ª´ tai ƒë·∫øn c·∫±m).', english: 'Girl', category: 'people' },
    { id: 'lesson-baby', title: 'Em b√©', image: '/people/baby.png', description: 'ƒê·∫∑t hai tay d∆∞·ªõi d·∫°ng ƒëang b·ªìng tr·∫ª, sau ƒë√≥ nh·∫π nh√†ng ƒëung ƒë∆∞a nh∆∞ ƒëang ru em b√©.', english: 'Baby', category: 'people' },
    { id: 'lesson-family', title: 'Gia ƒë√¨nh', image: '/people/family.png', description: 'Hai tay t·∫°o h√¨nh ch·ªØ ‚ÄúF‚Äù (ng√≥n tr·ªè v√† ng√≥n c√°i ch·∫°m nhau t·∫°o v√≤ng tr√≤n), hai tay ƒë·ªëi di·ªán nhau, r·ªìi xoay tr√≤n m·ªôt v√≤ng ƒë·ªÉ k·∫øt th√∫c v·ªã tr√≠ hai ch·ªØ F s√°t nhau.', english: 'Family', category: 'people' },
    { id: 'lesson-friend', title: 'B·∫°n', image: '/people/friend.png', description: 'M√≥c ng√≥n tr·ªè tay n√†y v√†o ng√≥n tr·ªè tay kia, r·ªìi ƒë·ªïi chi·ªÅu v√† m√≥c l·∫°i l·∫ßn n·ªØa.', english: 'Friend', category: 'people' },
    { id: 'lesson-teacher', title: 'Gi√°o vi√™n', image: '/people/teacher.png', description: 'ƒê∆∞a hai tay (c√°c ng√≥n kh√©p l·∫°i) l√™n g·∫ßn tr√°n nh∆∞ ƒëang ‚Äúm·ªü ƒë·∫ßu ra‚Äù, sau ƒë√≥ ƒë∆∞a hai b√†n tay xu·ªëng hai b√™n gi·ªëng nh∆∞ ch·ªâ ng∆∞·ªùi.', english: 'Teacher', category: 'people' },
    { id: 'lesson-neighbor', title: 'H√†ng x√≥m', image: '/people/neighbor.png', description: 'Hai b√†n tay h∆∞·ªõng v·ªÅ nhau nh∆∞ c√°i b·∫Øt tay nh∆∞ng kh√¥ng ch·∫°m, sau ƒë√≥ nh·∫•n nh·∫π m·ªôt tay v√†o tay kia.', english: 'Neighbor', category: 'people' },
    { id: 'lesson-woman', title: 'Ph·ª• n·ªØ', image: '/people/woman.png', description: 'ƒê·∫ßu ng√≥n c√°i tay ph·∫£i ch·∫°m v√†o c·∫±m, r·ªìi di chuy·ªÉn xu·ªëng ch·∫°m nh·∫π l√™n ng·ª±c (v√πng ng·ª±c tr√™n).', english: 'Woman', category: 'people' },
    { id: 'lesson-man', title: 'ƒê√†n √¥ng', image: '/people/man.png', description: 'ƒê·∫ßu ng√≥n c√°i ch·∫°m tr√°n (gi·ªëng ‚Äúfather‚Äù), sau ƒë√≥ tay m·ªü ra v√† h·∫° xu·ªëng tr∆∞·ªõc ng·ª±c.', english: 'Man', category: 'people' }
],
emotions: [
    { id: 'lesson-frightened', title: 'S·ª£ h√£i', image: '/feelings/frightened.png', description: 'ƒê∆∞a hai tay n·∫Øm l·∫°i tr∆∞·ªõc ng·ª±c, sau ƒë√≥ b·∫≠t m·ªü ra nh∆∞ b·ªã ho·∫£ng h·ªët. G∆∞∆°ng m·∫∑t hoang mang.', english: 'Frightened', category: 'emotions' },
    { id: 'lesson-happy', title: 'Vui v·∫ª', image: '/feelings/happy.png', description: 'D√πng l√≤ng b√†n tay xoa nh·∫π l√™n ng·ª±c theo chuy·ªÉn ƒë·ªông tr√≤n h∆∞·ªõng l√™n, n√©t m·∫∑t t∆∞∆°i s√°ng.', english: 'Happy', category: 'emotions' },
    { id: 'lesson-sad', title: 'Bu·ªìn', image: '/feelings/sad.png', description: 'M·ªü b√†n tay v√† k√©o t·ª´ tr√™n m·∫∑t xu·ªëng, bi·ªÉu c·∫£m tr·∫ßm l·∫∑ng v√† bu·ªìn b√£.', english: 'Sad', category: 'emotions' },
    { id: 'lesson-very-good', title: 'R·∫•t t·ªët', image: '/feelings/very-good.png', description: 'Gi∆° hai ng√≥n c√°i l√™n, n·ªü n·ª• c∆∞·ªùi t∆∞∆°i th·ªÉ hi·ªán s·ª± t√≠ch c·ª±c.', english: 'Very good', category: 'emotions' },
    { id: 'lesson-angry', title: 'Gi·∫≠n d·ªØ', image: '/feelings/angry.png', description: 'ƒê∆∞a tay l√™n ph√≠a tr∆∞·ªõc d·∫°ng vu·ªët cong, nh∆∞ c∆°n gi·∫≠n ƒëang d√¢ng tr√†o. G∆∞∆°ng m·∫∑t nghi√™m l·∫°i ho·∫∑c cau m√†y.', english: 'Angry', category: 'emotions' },
    { id: 'lesson-excited', title: 'H√†o h·ª©ng', image: '/feelings/excited.png', description: 'ƒê·∫∑t hai tay m·ªü g·∫ßn ng·ª±c, ng√≥n gi·ªØa ch·∫°m nh·∫π v√†o ng·ª±c v√† di chuy·ªÉn l√™n xu·ªëng lu√¢n phi√™n. Khu√¥n m·∫∑t r·∫°ng r·ª°.', english: 'Excited', category: 'emotions' },
    { id: 'lesson-love1', title: 'Y√™u th∆∞∆°ng', image: '/feelings/love.png', description: 'Khoanh tay tr∆∞·ªõc ng·ª±c nh∆∞ ƒëang √¥m ng∆∞·ªùi m√¨nh th∆∞∆°ng, k·∫øt h·ª£p √°nh m·∫Øt d·ªãu d√†ng.', english: 'Love', category: 'emotions' }
],

colors: [
    { id: 'lesson-green', title: 'M√†u l·ª•c', image: '/colours/green.png', description: 'Tay h√¨nh ch·ªØ G l·∫Øc nh·∫π g·∫ßn m√°.', english: 'Green', category: 'colors' },
    { id: 'lesson-blue', title: 'M√†u lam', image: '/colours/blue.png', description: 'Tay h√¨nh ch·ªØ B l·∫Øc nh·∫π tr∆∞·ªõc vai.', english: 'Blue', category: 'colors' },
    { id: 'lesson-yellow', title: 'M√†u v√†ng', image: '/colours/yellow.png', description: 'Tay ch·ªØ Y l·∫Øc nh·∫π g·∫ßn c·∫±m.', english: 'Yellow', category: 'colors' },
    { id: 'lesson-red', title: 'M√†u ƒë·ªè', image: '/colours/red.png', description: 'Ng√≥n tr·ªè ch·∫°m m√¥i r·ªìi h·∫° xu·ªëng.', english: 'Red', category: 'colors' },
    { id: 'lesson-white', title: 'M√†u tr·∫Øng', image: '/colours/white.png', description: 'M·ªü tay ·ªü ng·ª±c, k√©o ra r·ªìi kh√©p c√°c ng√≥n.', english: 'White', category: 'colors' },
    { id: 'lesson-black', title: 'M√†u ƒëen', image: '/colours/black.png', description: 'Ng√≥n tr·ªè qu√©t ngang tr√°n.', english: 'Black', category: 'colors' }
],

places: [
    { id: 'lesson-school', title: 'Tr∆∞·ªùng h·ªçc', image: '/places/school.png', description: 'Ng√≥n tr·ªè qu√©t ngang tr√°n.', english: 'School', category: 'places' }
],

actions: [
]



};

// T·∫°o d·ªØ li·ªáu t·ª´ ƒëi·ªÉn t·ªïng h·ª£p
const dictionaryData = [
    ...lessonData.alphabet,
    ...lessonData.numbers,
    ...lessonData.greetings,
    ...lessonData.people,
    ...lessonData.emotions,
    ...lessonData.colors,
    ...lessonData.places,
    ...lessonData.actions
];

//T·∫°o b·∫£n ƒë·ªì id -> th·ª© t·ª± ƒë·ªÉ so s√°nh
const idOrderMap = {};
dictionaryData.forEach((item, index) => {
    idOrderMap[item.id] = index;
});

// ===== X·ª≠ l√Ω ƒëi·ªÅu h∆∞·ªõng & menu hamburger =====
let navEventsInitialized = false;
function initNavigation() {
  const hamburger = document.querySelector('.hamburger');
  const navLinks = document.querySelector('.nav-links');
  const navItems = navLinks.querySelectorAll('li a');
  const indicator = document.querySelector('.indicator');

  // üëâ Toggle menu m·ªói l·∫ßn ·∫•n hamburger
  navLinks.classList.toggle('active');
  hamburger.classList.toggle('active');

  // ‚úÖ Ch·ªâ g·∫Øn s·ª± ki·ªán click v√†o menu items 1 l·∫ßn duy nh·∫•t
  if (!navEventsInitialized) {
    navItems.forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();

        navItems.forEach(el => el.classList.remove('active'));
        item.classList.add('active');

        // Di chuy·ªÉn indicator n·∫øu kh√¥ng ph·∫£i mobile
        if (window.innerWidth > 768 && indicator) {
          moveIndicator(item);
        }

        // ƒê√≥ng menu mobile sau khi ch·ªçn m·ª•c
        navLinks.classList.remove('active');
        hamburger.classList.remove('active');
      });
    });

    // Di chuy·ªÉn indicator ban ƒë·∫ßu
    window.addEventListener('load', () => {
      const activeItem = document.querySelector('li a.active') || navItems[0];
      if (window.innerWidth > 768 && indicator) {
        moveIndicator(activeItem);
      }
    });

    // Di chuy·ªÉn l·∫°i khi resize
    window.addEventListener('resize', () => {
      const activeItem = document.querySelector('li a.active');
      if (window.innerWidth > 768 && activeItem && indicator) {
        moveIndicator(activeItem);
      }
    });

    navEventsInitialized = true;
  }

  // H√†m n·ªôi b·ªô di chuy·ªÉn indicator
  function moveIndicator(target) {
    const rect = target.getBoundingClientRect();
    const navRect = navLinks.getBoundingClientRect();
    indicator.style.width = `${rect.width}px`;
    indicator.style.left = `${rect.left - navRect.left}px`;
  }
}
document.addEventListener('DOMContentLoaded', initNavigation);



// Chuy·ªÉn ƒë·ªïi gi·ªØa c√°c section
function switchSection(sectionId) {
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => {
        section.classList.remove('active');
    });
    
    const targetSection = document.getElementById(sectionId);
    if (targetSection) {
        targetSection.classList.add('active');
    }
    
    const navItems = document.querySelectorAll('.nav-links li');
    navItems.forEach(item => {
        item.classList.remove('active');
        const link = item.querySelector('a');
        if (link && link.getAttribute('href') === `#${sectionId}`) {
            item.classList.add('active');
        }
    });
    
    const navLinks = document.querySelector('.nav-links');
    navLinks.classList.remove('active');
}

// h√†m cho gi·∫£ l·∫≠p chuy·ªÉn tab b√†i h·ªçc
function startLesson() {
    document.querySelector('a[href="#lessons"]').click();
}

// Kh·ªüi t·∫°o ph·∫ßn b√†i h·ªçc
function initLessons() {
    const modal = document.getElementById('lesson-modal');
    const closeBtn = modal.querySelector('.close');
    
    closeBtn.addEventListener('click', function() {
        modal.style.display = 'none';
    });
    
    window.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// Render b√†i h·ªçc theo danh m·ª•c
function renderLessonsByCategory() {
    Object.keys(lessonData).forEach(category => {
        const grid = document.getElementById(`${category}-grid`);
        if (grid) {
            grid.innerHTML = lessonData[category].map(lesson => `
                <div class="lesson-card" data-id="${lesson.id}" onclick="openLesson('${lesson.id}')">
                    <div class="lesson-img">
                        <img src="${lesson.image}" alt="${lesson.title}"/>
                    </div>
                    <h4>${lesson.title}</h4>
                    <button class="lesson-btn" onclick="event.stopPropagation(); openLesson('${lesson.id}')">Xem chi ti·∫øt</button>
                    <span class="completion-badge hidden"><i class="fas fa-check"></i></span>
                </div>
            `).join('');
        }
    });
    updateLessonCompletionBadges();
}
document.addEventListener('DOMContentLoaded', () => {
  renderLessonsByCategory();
  initLessons(); // n·∫øu c·∫ßn
});


// Chuy·ªÉn ƒë·ªïi gi·ªØa c√°c danh m·ª•c b√†i h·ªçc
function changeCategory(categoryId) {
    const tabs = document.querySelectorAll('.category-tabs .tab');
    tabs.forEach(tab => {
        tab.classList.remove('active');
        if (tab.getAttribute('onclick').includes(categoryId)) {
            tab.classList.add('active');
        }
    });
    
    const categories = document.querySelectorAll('.lesson-category');
    categories.forEach(category => {
        category.classList.remove('active');
    });
    
    const targetCategory = document.getElementById(categoryId);
    if (targetCategory) {
        targetCategory.classList.add('active');
    }
}

// M·ªü chi ti·∫øt b√†i h·ªçc
function openLesson(lessonId) {
    const modal = document.getElementById('lesson-modal');
    const lessonDetail = document.getElementById('lesson-detail');
    
    const lesson = findLessonById(lessonId);
    if (!lesson) return;

    const tips = [
        'Th·ª±c h√†nh ch·∫≠m r√£i ƒë·ªÉ nh·ªõ ch√≠nh x√°c',
        'Quan s√°t k·ªπ h√¨nh ·∫£nh m·∫´u',
        'Luy·ªán t·∫≠p nhi·ªÅu l·∫ßn ƒë·ªÉ th√†nh th·∫°o',
        'Ch√∫ √Ω ƒë·∫øn h∆∞·ªõng c·ªßa b√†n tay'
    ];

    // T·∫°o n·ªôi dung HTML kh√¥ng g·∫Øn s·ª± ki·ªán tr·ª±c ti·∫øp trong template string
    let content = `
        <h2>${lesson.title}</h2>
        <div class="lesson-detail-content">
            <div class="lesson-media">
                <img src="${lesson.image}" alt="${lesson.title}" class="lesson-detail-img">
                <button class="play-audio" id="play-audio-btn">
                    <i class="fas fa-volume-up"></i> Nghe m√¥ t·∫£
                </button>
                <button class="mark-complete-btn" id="mark-complete-btn">
                    ${appData.completedLessons.includes(lessonId) ? 'ƒê√£ ho√†n th√†nh' : 'ƒê√°nh d·∫•u ƒë√£ h·ªçc xong'}
                </button>
            </div>
            <div class="lesson-instructions">
                <h3>C√°ch th·ª±c hi·ªán</h3>
                <p>${lesson.description}</p>
                <div class="lesson-tips">
                    <h4>L∆∞u √Ω</h4>
                    <ul>
                        ${tips.map(tip => `<li>${tip}</li>`).join('')}
                    </ul>
                </div>
            </div>
        </div>
    `;

    lessonDetail.innerHTML = content;
    modal.style.display = 'flex';

    // G·∫Øn s·ª± ki·ªán sau khi g√°n innerHTML
    const playBtn = document.getElementById('play-audio-btn');
    playBtn.addEventListener('click', () => playAudio(lessonId));

    const completeBtn = document.getElementById('mark-complete-btn');
    completeBtn.addEventListener('click', () => markLessonComplete(lessonId));
}


// T√¨m b√†i h·ªçc theo ID
function findLessonById(lessonId) {
    for (let category of Object.values(lessonData)) {
        const lesson = category.find(l => l.id === lessonId);
        if (lesson) return lesson;
    }
    return null;
}

// ƒê√°nh d·∫•u b√†i h·ªçc ƒë√£ ho√†n th√†nh
function markLessonComplete(lessonId) {
    const index = appData.completedLessons.indexOf(lessonId);

    if (index === -1) {
        // Ch∆∞a ho√†n th√†nh ‚Üí ƒë√°nh d·∫•u l√† ho√†n th√†nh
        appData.completedLessons.push(lessonId);

        const lesson = findLessonById(lessonId);
        addRecentActivity(`Ho√†n th√†nh b√†i h·ªçc: ${lesson.title}`);

        saveUserProgress();
        updateLessonCompletionBadges();
        updateProgressDisplay();

        alert('‚úÖ B·∫°n ƒë√£ ho√†n th√†nh b√†i h·ªçc!');
    } else {
        // ƒê√£ ho√†n th√†nh ‚Üí g·ª° ƒë√°nh d·∫•u ho√†n th√†nh
        appData.completedLessons.splice(index, 1);  // X√≥a kh·ªèi danh s√°ch

        const lesson = findLessonById(lessonId);
        addRecentActivity(`ƒê√£ b·ªè ƒë√°nh d·∫•u ho√†n th√†nh: ${lesson.title}`);

        saveUserProgress();
        updateLessonCompletionBadges();
        updateProgressDisplay();

        alert('‚ùå ƒê√£ b·ªè ƒë√°nh d·∫•u ho√†n th√†nh b√†i h·ªçc.');
    }

    openLesson(lessonId);
}

// C·∫≠p nh·∫≠t huy hi·ªáu ho√†n th√†nh
function updateLessonCompletionBadges() {
    const allLessons = document.querySelectorAll('.lesson-card');
    allLessons.forEach(card => {
        const lessonId = card.getAttribute('data-id');
        const badge = card.querySelector('.completion-badge');
        
        if (badge) {
            if (appData.completedLessons.includes(lessonId)) {
                badge.classList.remove('hidden');
            } else {
                badge.classList.add('hidden');
            }
        }
    });
}

// Ph√°t √¢m thanh 
function playAudio(lessonId) {
    console.log(`ƒêang ph√°t: ${lessonId}`);
    const audio = new Audio(`audio/${lessonId}.mp3`);
    audio.play().catch(error => {
        console.error(`Kh√¥ng th·ªÉ ph√°t √¢m thanh cho ${lessonId}:`, error);
    });
}


// =======================
// KH·ªûI T·∫†O T·ª™ ƒêI·ªÇN
// =======================
function initDictionary() {
    const searchInput = document.getElementById('dictionary-search');
    const searchBtn = document.getElementById('search-btn');
    
    if (searchInput) {
        searchInput.addEventListener('input', performDictionarySearch);
        searchBtn.addEventListener('click', performDictionarySearch);
    }

    // Hi·ªÉn th·ªã t·∫•t c·∫£ t·ª´ ban ƒë·∫ßu
    displayDictionaryResults(dictionaryData);
}

// Th·ª±c hi·ªán t√¨m ki·∫øm t·ª´ ƒëi·ªÉn
function performDictionarySearch() {
    const searchTerm = document.getElementById('dictionary-search').value.toLowerCase().trim();

    if (searchTerm === '') {
        const sortedOriginal = [...dictionaryData].sort((a, b) => idOrderMap[a.id] - idOrderMap[b.id]);
        displayDictionaryResults(sortedOriginal);
        return;
    }

    const startsWithResults = dictionaryData.filter(item =>
        item.title.toLowerCase().startsWith(searchTerm)
    );

    const containsResults = dictionaryData.filter(item =>
        !startsWithResults.includes(item) &&
        item.title.toLowerCase().includes(searchTerm)
    );

    const finalResults = [...startsWithResults, ...containsResults];
    displayDictionaryResults(finalResults);
}

// Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ ƒëi·ªÉn
function displayDictionaryResults(results) {
    const container = document.getElementById('dictionary-items');
    const noResults = document.getElementById('no-results');

    if (results.length === 0) {
        container.innerHTML = '';
        noResults.classList.remove('hidden');
        return;
    }

    noResults.classList.add('hidden');
    container.innerHTML = results.map(item => `
        <div class="dictionary-card" data-category="${item.category}">
            <div class="word-img">
                <img src="${item.image}" alt="${item.title}"/>
            </div>
            <div class="word-info">
                <h4>${item.title}</h4>
                <p><strong>English:</strong> ${item.english}</p>
                <p><small>Danh m·ª•c: ${getCategoryName(item.category)}</small></p>
            </div>
        </div>
    `).join('');
}

// L·ªçc t·ª´ ƒëi·ªÉn theo danh m·ª•c
function filterDictionary(category) {
    document.querySelectorAll('.pill').forEach(pill => {
        pill.classList.remove('active');
        if (pill.getAttribute('onclick').includes(category)) {
            pill.classList.add('active');
        }
    });

    const filtered = (category === 'all')
        ? dictionaryData
        : dictionaryData.filter(item => item.category === category);

    filtered.sort((a, b) => idOrderMap[a.id] - idOrderMap[b.id]);
    displayDictionaryResults(filtered);
}

// L·∫•y t√™n danh m·ª•c ti·∫øng Vi·ªát
function getCategoryName(category) {
    const names = {
        alphabet: 'Ch·ªØ c√°i',
        numbers: 'S·ªë ƒë·∫øm',
        greetings: 'Ch√†o h·ªèi',
        people: 'Con ng∆∞·ªùi',
        emotions: 'C·∫£m x√∫c',
        colors: 'M√†u s·∫Øc',
        places: "ƒê·ªãa ƒëi·ªÉm",
        actions: "H√†nh ƒë·ªông"
    };
    return names[category] || category;
}

// Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô t·ª´ ƒëi·ªÉn (search, camera, testapi)
function switchDictionaryMode(mode) {
    document.querySelectorAll('.mode-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`.mode-btn[onclick*="${mode}"]`).classList.add('active');

    document.querySelectorAll('.dictionary-mode').forEach(div => {
        div.classList.remove('active');
    });
    const modeDiv = document.getElementById(`${mode}-mode`);
    if (modeDiv) modeDiv.classList.add('active');

    if (mode === 'camera') {
        initCamera();
    } else {
        stopCamera?.();
    }

    if (mode === 'testapi') {
        window.restoreTestAPIPreview?.();
    }
}


// Kh·ªüi t·∫°o ch·ª©c nƒÉng Test API (Xem tr∆∞·ªõc ·∫£nh khi ch·ªçn)
function initTestAPI() {
    let lastPreviewImageSrc = null;

    const fileInput = document.getElementById('testapi-fileInput');
    const previewEl = document.getElementById('testapi-preview');

    if (!fileInput || !previewEl) return;

    fileInput.addEventListener('change', () => {
        if (fileInput.files?.[0]) {
            const reader = new FileReader();
            reader.onload = e => {
                lastPreviewImageSrc = e.target.result;
                previewEl.innerHTML = `<img src="${lastPreviewImageSrc}" style="max-width:200px;max-height:200px;border-radius:8px;box-shadow:0 2px 8px #0002;">`;
            };
            reader.readAsDataURL(fileInput.files[0]);
        } else {
            previewEl.innerHTML = '';
        }
    });

    // H√†m kh√¥i ph·ª•c preview khi chuy·ªÉn tab
    window.restoreTestAPIPreview = () => {
        if (lastPreviewImageSrc && previewEl) {
            previewEl.innerHTML = `<img src="${lastPreviewImageSrc}" style="max-width:200px;max-height:200px;border-radius:8px;box-shadow:0 2px 8px #0002;">`;
        }
    };
}


// Kh·ªüi t·∫°o khu v·ª±c luy·ªán t·∫≠p
function initPracticeArea() {
    initQuiz();
    initDragDrop();
    initFlashCards();
}

// Kh·ªüi t·∫°o quiz
function initQuiz() {
    generateQuizQuestions();
    startQuiz();
}

// T·∫°o c√¢u h·ªèi quiz
function generateQuizQuestions() {
    const allLessons = [...dictionaryData];
    const shuffled = allLessons.sort(() => 0.5 - Math.random());
    appData.quizQuestions = shuffled.slice(0, 20).map(lesson => {
        const wrongAnswers = allLessons
            .filter(l => l.id !== lesson.id && l.category === lesson.category)
            .sort(() => 0.5 - Math.random())
            .slice(0, 3);
        
        const options = [lesson, ...wrongAnswers].sort(() => 0.5 - Math.random());
        
        return {
            question: lesson,
            options: options,
            correctAnswer: lesson.title
        };
    });
}

// B·∫Øt ƒë·∫ßu quiz
function startQuiz() {
    appData.currentQuizIndex = 0;
    appData.currentQuizScore = 0;
    document.getElementById('quiz-results').classList.add('hidden');
    document.getElementById('quiz-feedback').classList.add('hidden');
    showNextQuestion();
}

// Hi·ªÉn th·ªã c√¢u h·ªèi ti·∫øp theo
function showNextQuestion() {
    if (appData.currentQuizIndex >= appData.quizQuestions.length) {
        showQuizResults();
        return;
    }
    
    const question = appData.quizQuestions[appData.currentQuizIndex];
    
    document.getElementById('current-question').textContent = appData.currentQuizIndex + 1;
    document.getElementById('current-score').textContent = appData.currentQuizScore;
    document.getElementById('quiz-image').src = question.question.image;
    document.getElementById('quiz-text').textContent = 'K√Ω hi·ªáu n√†y c√≥ √Ω nghƒ©a g√¨?';
    
    const optionsContainer = document.getElementById('quiz-options');
    optionsContainer.innerHTML = question.options.map(option => `
        <button class="quiz-option" onclick="selectQuizAnswer('${option.title}', '${question.correctAnswer}')">${option.title}</button>
    `).join('');
    
    document.getElementById('quiz-feedback').classList.add('hidden');
}

// Ch·ªçn ƒë√°p √°n quiz
function selectQuizAnswer(selected, correct) {
    const options = document.querySelectorAll('.quiz-option');
    options.forEach(option => {
        option.disabled = true;
        if (option.textContent === correct) {
            option.classList.add('correct');
        } else if (option.textContent === selected && selected !== correct) {
            option.classList.add('incorrect');
        }
    });
    
    const feedback = document.getElementById('quiz-feedback');
    const feedbackText = document.getElementById('feedback-text');
    
    if (selected === correct) {
        appData.currentQuizScore += 5;
        feedbackText.textContent = 'Ch√≠nh x√°c! Tuy·ªát v·ªùi!';
        feedbackText.className = 'feedback-text correct';
    } else {
        feedbackText.textContent = `Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†: ${correct}`;
        feedbackText.className = 'feedback-text incorrect';
    }
    
    document.getElementById('current-score').textContent = appData.currentQuizScore;
    feedback.classList.remove('hidden');
}

// C√¢u h·ªèi ti·∫øp theo
function nextQuestion() {
    appData.currentQuizIndex++;
    showNextQuestion();
}

// Hi·ªÉn th·ªã k·∫øt qu·∫£ quiz
function showQuizResults() {
    const correctAnswers = Math.floor(appData.currentQuizScore / 5);
    const percentage = (correctAnswers / 20) * 100;
    
    document.getElementById('correct-answers').textContent = correctAnswers;
    document.getElementById('final-score').textContent = appData.currentQuizScore;
    
    let rating, ratingClass;
    if (percentage >= 85) {
        rating = 'Xu·∫•t s·∫Øc';
        ratingClass = 'rating-excellent';
    } else if (percentage >= 70) {
        rating = 'Gi·ªèi';
        ratingClass = 'rating-good';
    } else if (percentage >= 50) {
        rating = 'Trung b√¨nh';
        ratingClass = 'rating-average';
    } else {
        rating = 'C·∫ßn c·ªë g·∫Øng';
        ratingClass = 'rating-poor';
    }
    
    const ratingElement = document.getElementById('performance-rating');
    ratingElement.textContent = rating;
    ratingElement.className = ratingClass;
    
    document.getElementById('quiz-results').classList.remove('hidden');
    
    // L∆∞u ƒëi·ªÉm s·ªë
    appData.practiceScores.push(appData.currentQuizScore);
    addRecentActivity(`Ho√†n th√†nh quiz - ƒêi·ªÉm: ${appData.currentQuizScore}/100`);
    saveUserProgress();
    updateProgressDisplay();
}

// Chuy·ªÉn ƒë·ªïi lo·∫°i luy·ªán t·∫≠p
function changePracticeType(type, event) {
    const areas = document.querySelectorAll(".practice-area");
    areas.forEach(area => area.classList.remove("active"));
    document.getElementById(type).classList.add("active");

    const buttons = document.querySelectorAll(".practice-type");
    buttons.forEach(btn => btn.classList.remove("active"));
    if (event?.currentTarget) {
        event.currentTarget.classList.add("active");
    }

    // N·∫øu l√† ph·∫ßn Gh√©p c√¢u, th√¨ kh·ªüi t·∫°o + ·∫©n feedback c≈©
    if (type === "sentence-builder") {
        loadSentenceBuilder();
        const feedback = document.getElementById("sentence-feedback");
        if (feedback) feedback.classList.add("hidden");
    }
}


// Kh·ªüi t·∫°o drag drop
function initDragDrop() {
    setupDragDrop();
}

// Thi·∫øt l·∫≠p drag drop
function setupDragDrop() {
    // Ch·ªçn ng·∫´u nhi√™n 6 b√†i h·ªçc t·ª´ d·ªØ li·ªáu t·ª´ ƒëi·ªÉn
    const randomLessons = dictionaryData.sort(() => 0.5 - Math.random()).slice(0, 6);

    const dragItems = document.getElementById('drag-items');
    const dropTargets = document.getElementById('drop-targets');

    // T·∫°o c√°c m·ª•c c√≥ th·ªÉ k√©o (drag items)
    dragItems.innerHTML = randomLessons.map(lesson => `
        <div class="drag-item" draggable="true" data-match="${lesson.id}">${lesson.title}</div>
    `).join('');

    // T·∫°o c√°c m·ª•c ƒë√≠ch (drop targets) t∆∞∆°ng ·ª©ng v·ªõi h√¨nh ·∫£nh
    dropTargets.innerHTML = randomLessons.map(lesson => `
        <div class="drop-target" data-target="${lesson.id}">
            <img src="${lesson.image}" alt="${lesson.title}"/>
        </div>
    `).join('');

    // G√°n c√°c s·ª± ki·ªán drag v√† drop cho c√°c ph·∫ßn t·ª≠
    const dragItemElements = document.querySelectorAll('.drag-item');
    const dropTargetElements = document.querySelectorAll('.drop-target');

    dragItemElements.forEach(item => {
        item.addEventListener('dragstart', handleDragStart);
        item.addEventListener('dragend', handleDragEnd);
    });

    dropTargetElements.forEach(target => {
        target.addEventListener('dragover', handleDragOver);
        target.addEventListener('drop', handleDrop);
        target.addEventListener('dragenter', handleDragEnter);
        target.addEventListener('dragleave', handleDragLeave);
    });
}

let draggedElement = null;

// Khi b·∫Øt ƒë·∫ßu k√©o m·ªôt ph·∫ßn t·ª≠ drag-item
function handleDragStart(e) {
    draggedElement = this;
    this.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.outerHTML);
}

// Khi k·∫øt th√∫c thao t√°c k√©o
function handleDragEnd(e) {
    this.classList.remove('dragging');
}

// Cho ph√©p ph·∫ßn t·ª≠ c√≥ th·ªÉ nh·∫≠n ph·∫ßn t·ª≠ ƒëang k√©o (drop ƒë∆∞·ª£c)
function handleDragOver(e) {
    if (e.preventDefault) {
        e.preventDefault();
    }
    e.dataTransfer.dropEffect = 'move';
    return false;
}

// Khi ph·∫ßn t·ª≠ ƒëang k√©o ƒëi v√†o v√πng drop
function handleDragEnter(e) {
    this.classList.add('highlight');
}

// Khi ph·∫ßn t·ª≠ ƒëang k√©o r·ªùi kh·ªèi v√πng drop
function handleDragLeave(e) {
    this.classList.remove('highlight');
}

// Khi ph·∫ßn t·ª≠ ƒë∆∞·ª£c th·∫£ v√†o m·ª•c ti√™u
function handleDrop(e) {
    if (e.stopPropagation) {
        e.stopPropagation();
    }

    this.classList.remove('highlight');

    if (draggedElement) {
        const draggedId = draggedElement.getAttribute('data-match');
        const targetId = this.getAttribute('data-target');

        if (draggedId === targetId) {
            // N·∫øu ƒë√∫ng kh·ªõp, th√™m n·ªôi dung v√†o drop target v√† ·∫©n ph·∫ßn t·ª≠ ƒë√£ k√©o
            const droppedItem = document.createElement('div');
            droppedItem.className = 'dropped-item';
            droppedItem.textContent = draggedElement.textContent;
            this.appendChild(droppedItem);
            draggedElement.style.display = 'none';
        }
    }

    return false;
}


// Reset drag drop
function resetDragDrop() {
    const dragItems = document.querySelectorAll('.drag-item');
    const dropTargets = document.querySelectorAll('.drop-target');
    const droppedItems = document.querySelectorAll('.dropped-item');
    
    dragItems.forEach(item => {
        item.style.display = 'block';
    });
    
    dropTargets.forEach(target => {
        target.classList.remove('correct', 'incorrect', 'highlight');
    });
    
    droppedItems.forEach(item => {
        item.remove();
    });
    
    document.getElementById('drag-drop-results').classList.add('hidden');
}

// Ki·ªÉm tra drag drop
function checkDragDrop() {
    const dropTargets = document.querySelectorAll('.drop-target');
    let correct = 0;
    let total = 0;
    
    dropTargets.forEach(target => {
        const droppedItem = target.querySelector('.dropped-item');
        if (droppedItem) {
            total++;
            const targetId = target.getAttribute('data-target');
            const lesson = findLessonById(targetId);
            if (lesson && droppedItem.textContent === lesson.title) {
                correct++;
                target.classList.add('correct');
            } else {
                target.classList.add('incorrect');
            }
        }
    });
    
    const score = Math.round((correct / dropTargets.length) * 100);
    const resultsDiv = document.getElementById('drag-drop-results');
    const scoreDiv = document.getElementById('drag-drop-score');
    
    scoreDiv.textContent = `K·∫øt qu·∫£: ${correct}/${dropTargets.length} ƒë√∫ng (${score}%)`;
    resultsDiv.classList.remove('hidden');
    
    // L∆∞u ƒëi·ªÉm s·ªë
    appData.practiceScores.push(score);
    addRecentActivity(`Ho√†n th√†nh b√†i t·∫≠p k√©o th·∫£ - ƒêi·ªÉm: ${score}%`);
    saveUserProgress();
}

// Kh·ªüi t·∫°o flash cards
function initFlashCards() {
    setupFlashCards();
}

// Thi·∫øt l·∫≠p flash cards
function setupFlashCards() {
    // Ch·ªâ l·∫•y c√°c b√†i h·ªçc ƒë√£ ho√†n th√†nh ho·∫∑c ng·∫´u nhi√™n 10 b√†i
    let availableLessons = appData.completedLessons.length > 0 
        ? dictionaryData.filter(lesson => appData.completedLessons.includes(lesson.id))
        : dictionaryData;
    
    if (availableLessons.length === 0) {
        availableLessons = dictionaryData.slice(0, 10);
    }
    
    appData.flashcardDeck = availableLessons.sort(() => 0.5 - Math.random()).slice(0, 10);
    appData.flashcardIndex = 0;
    
    showCurrentFlashCard();
}

// Hi·ªÉn th·ªã th·∫ª flash card hi·ªán t·∫°i
function showCurrentFlashCard() {
    if (appData.flashcardDeck.length === 0) return;
    
    const currentCard = appData.flashcardDeck[appData.flashcardIndex];
    const flashcard = document.getElementById('flashcard');
    
    // Reset tr·∫°ng th√°i flip
    flashcard.classList.remove('flipped');
    
    // C·∫≠p nh·∫≠t n·ªôi dung
    document.getElementById('flashcard-image').src = currentCard.image;
    document.getElementById('flashcard-word').textContent = currentCard.title;
    document.getElementById('flashcard-meaning').textContent = `English: ${currentCard.english}`;
    
    // C·∫≠p nh·∫≠t counter v√† progress
    const counter = document.getElementById('card-counter');
    counter.textContent = `${appData.flashcardIndex + 1}/${appData.flashcardDeck.length}`;
    
    const progress = ((appData.flashcardIndex + 1) / appData.flashcarecentActivitiesrdDeck.length) * 100;
    const progressBar = document.getElementById('flashcard-progress');
    progressBar.style.width = `${progress}%`;
    progressBar.textContent = `${Math.round(progress)}%`;
}

// L·∫≠t th·∫ª
function flipCard() {
    const flashcard = document.getElementById('flashcard');
    flashcard.classList.toggle('flipped');
}

// Th·∫ª tr∆∞·ªõc
function prevCard() {
    if (appData.flashcardIndex > 0) {
        appData.flashcardIndex--;
        showCurrentFlashCard();
    }
}

// Th·∫ª sau
function nextCard() {
    if (appData.flashcardIndex < appData.flashcardDeck.length - 1) {
        appData.flashcardIndex++;
        showCurrentFlashCard();
    }
}

// X√°o tr·ªôn th·∫ª
function shuffleCards() {
    appData.flashcardDeck = appData.flashcardDeck.sort(() => 0.5 - Math.random());
    appData.flashcardIndex = 0;
    showCurrentFlashCard();
}

// ==================== GH√âP C√ÇU B·∫∞NG K√ù HI·ªÜU ====================

const sentences = [
    {
        prompt: "T√¥i kh√¥ng s·ª£",
        correctOrder: ["greeting/IAM.png", "greeting/no.png", "feelings/frightened.png"]
    },
    {
        prompt: "T√¥i y√™u m√†u ƒë·ªè",
        correctOrder: ["greeting/IAM.png", "feelings/love.png", "colours/red.png"]
    }
];


let currentSentence = null;
function loadSentenceBuilder() {
    currentSentence = sentences[Math.floor(Math.random() * sentences.length)];
    document.getElementById("sentence-prompt").innerText = currentSentence.prompt;

    const shuffled = shuffle([...currentSentence.correctOrder]);

    const pool = document.getElementById("available-signs");
    const dropZone = document.getElementById("sentence-drop-zone");
    pool.innerHTML = '';
    dropZone.innerHTML = '';

    shuffled.forEach(imgName => {
        const img = document.createElement("img");
        img.src = imgName;
        img.draggable = true;
        img.classList.add("sign-img");
        img.addEventListener("dragstart", (e) => {
            e.dataTransfer.setData("text/plain", img.src);
        });
        pool.appendChild(img);
    });
}

// Ch·ªâ g√°n s·ª± ki·ªán 1 l·∫ßn duy nh·∫•t
document.addEventListener("DOMContentLoaded", () => {
    const dropZone = document.getElementById("sentence-drop-zone");

    dropZone.addEventListener("dragover", (e) => e.preventDefault());

    dropZone.addEventListener("drop", (e) => {
        e.preventDefault();
        const src = e.dataTransfer.getData("text/plain");

        const img = document.createElement("img");
        img.src = src;
        img.classList.add("sign-img");
        dropZone.appendChild(img);

        // L√†m m·ªù v√† v√¥ hi·ªáu ·∫£nh t∆∞∆°ng ·ª©ng trong pool
        const srcName = src.split("/").pop();
        const poolImgs = document.querySelectorAll("#available-signs img");
        poolImgs.forEach(img => {
            const imgName = img.src.split("/").pop();
            if (imgName === srcName) {
                img.style.opacity = "0.3";
                img.style.pointerEvents = "none";
            }
        });
    });

    // G·ªçi h√†m ƒë·∫ßu ti√™n khi trang t·∫£i
    loadSentenceBuilder();
});

function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

function checkSentenceBuilder() {
    const dropZone = document.getElementById("sentence-drop-zone");
    const dropped = Array.from(dropZone.querySelectorAll("img"))
        .map(img => img.src.split("/").pop()); // ch·ªâ l·∫•y t√™n file

    const expected = currentSentence.correctOrder.map(src => src.split("/").pop()); // chu·∫©n h√≥a ƒë·ªÉ tr√πng ki·ªÉu

    const isCorrect = JSON.stringify(dropped) === JSON.stringify(expected);

    const feedback = document.getElementById("sentence-feedback");
    feedback.innerText = isCorrect ? "üéâ Ch√≠nh x√°c!" : "‚ùå Ch∆∞a ƒë√∫ng. H√£y th·ª≠ l·∫°i!";
    feedback.classList.remove("hidden");
}


function resetSentenceBuilder() {
    loadSentenceBuilder();
    document.getElementById("sentence-feedback").classList.add("hidden");
}

// Th√™m ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
function addRecentActivity(activity) {
    const now = new Date();
    const timeString = now.toLocaleString('vi-VN');
    
    appData.recentActivities.unshift({
        activity: activity,
        time: timeString
    });

    // Ch·ªâ gi·ªØ 10 ho·∫°t ƒë·ªông g·∫ßn nh·∫•t
    if (appData.recentActivities.length > 10) {
        appData.recentActivities = appData.recentActivities.slice(0, 10);
    }

    saveUserProgress(); // ‚ûï l∆∞u ngay khi c√≥ thay ƒë·ªïi

    updateRecentActivitiesDisplay();
}


// C·∫≠p nh·∫≠t hi·ªÉn th·ªã ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
function updateRecentActivitiesDisplay() {
    const container = document.getElementById('recent-activities');
    
    if (appData.recentActivities.length === 0) {
        container.innerHTML = '<p class="no-activity">Ch∆∞a c√≥ ho·∫°t ƒë·ªông n√†o ƒë∆∞·ª£c ghi nh·∫≠n</p>';
        return;
    }
    
    container.innerHTML = appData.recentActivities.map(activity => `
        <div class="activity-item">
            <div class="activity-info">
                <p>${activity.activity}</p>
            </div>
            <div class="activity-time">${activity.time}</div>
        </div>
    `).join('');
}

// L∆∞u ti·∫øn tr√¨nh ng∆∞·ªùi d√πng
function saveUserProgress() {
    localStorage.setItem('signAppProgress', JSON.stringify(appData));
}


// T·∫£i ti·∫øn tr√¨nh ng∆∞·ªùi d√πng
function loadUserProgress() {
    const saved = localStorage.getItem('signAppProgress');
    if (saved) {
        const parsed = JSON.parse(saved);
        appData.completedLessons = parsed.completedLessons || [];
        appData.practiceScores = parsed.practiceScores || [];
        appData.recentActivities = parsed.recentActivities || [];
    }
}


// C·∫≠p nh·∫≠t hi·ªÉn th·ªã ti·∫øn tr√¨nh
function updateProgressDisplay() {
    // T·ªïng s·ªë b√†i h·ªçc
    const totalLessons = dictionaryData.length;
    const completedCount = appData.completedLessons.length;
    const completionPercentage = totalLessons > 0 ? (completedCount / totalLessons) * 100 : 0;
    
    // C·∫≠p nh·∫≠t t·ªïng quan
    document.getElementById('completed-lessons').textContent = completedCount;
    document.getElementById('total-lessons').textContent = totalLessons;
    
    const totalProgress = document.getElementById('total-progress');
    totalProgress.style.width = `${completionPercentage}%`;
    totalProgress.textContent = `${Math.round(completionPercentage)}%`;
    
    // ƒêi·ªÉm luy·ªán t·∫≠p
    const avgScore = appData.practiceScores.length > 0 
        ? Math.round(appData.practiceScores.reduce((a, b) => a + b, 0) / appData.practiceScores.length)
        : 0;
    
    document.getElementById('practice-score').textContent = appData.practiceScores.reduce((a, b) => a + b, 0);
    document.getElementById('average-score').textContent = avgScore;
    
    // ƒê√°nh gi√° t·ªïng th·ªÉ
    updateOverallRating(completionPercentage, avgScore);
    
    // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh theo danh m·ª•c
    updateCategoryProgress();
    
    // C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
    updateRecentActivitiesDisplay();
}

// C·∫≠p nh·∫≠t ƒë√°nh gi√° t·ªïng th·ªÉ
function updateOverallRating(completionPercentage, avgScore) {
    const overallScore = (completionPercentage * 0.6) + (avgScore * 0.4);
    
    let rating, description, ratingClass;
    
    if (overallScore >= 85) {
        rating = 'Xu·∫•t s·∫Øc';
        description = 'B·∫°n ƒë√£ th√†nh th·∫°o ng√¥n ng·ªØ k√Ω hi·ªáu! H√£y ti·∫øp t·ª•c duy tr√¨ v√† chia s·∫ª ki·∫øn th·ª©c.';
        ratingClass = 'rating-excellent';
    } else if (overallScore >= 70) {
        rating = 'Gi·ªèi';
        description = 'B·∫°n ƒë√£ c√≥ n·ªÅn t·∫£ng v·ªØng ch·∫Øc! H√£y luy·ªán t·∫≠p th√™m ƒë·ªÉ ƒë·∫°t tr√¨nh ƒë·ªô cao h∆°n.';
        ratingClass = 'rating-good';
    } else if (overallScore >= 50) {
        rating = 'Trung b√¨nh';
        description = 'B·∫°n ƒëang ti·∫øn b·ªô t·ªët! H√£y ho√†n th√†nh th√™m b√†i h·ªçc v√† luy·ªán t·∫≠p nhi·ªÅu h∆°n.';
        ratingClass = 'rating-average';
    } else if (overallScore >= 25) {
        rating = 'C·∫ßn c·ªë g·∫Øng';
        description = 'B·∫°n m·ªõi b·∫Øt ƒë·∫ßu! H√£y ki√™n tr√¨ h·ªçc t·∫≠p v√† luy·ªán t·∫≠p ƒë·ªÅu ƒë·∫∑n.';
        ratingClass = 'rating-poor';
    } else {
        rating = 'M·ªõi b·∫Øt ƒë·∫ßu';
        description = 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h√†nh tr√¨nh h·ªçc ng√¥n ng·ªØ k√Ω hi·ªáu! H√£y b·∫Øt ƒë·∫ßu v·ªõi c√°c b√†i h·ªçc c∆° b·∫£n.';
        ratingClass = 'rating-poor';
    }
    
    const ratingElement = document.getElementById('overall-rating');
    const descriptionElement = document.getElementById('rating-description');
    
    ratingElement.textContent = rating;
    ratingElement.className = ratingClass;
    descriptionElement.textContent = description;
}

// C·∫≠p nh·∫≠t ti·∫øn tr√¨nh theo danh m·ª•c
function updateCategoryProgress() {
    Object.keys(lessonData).forEach(category => {
        const categoryLessons = lessonData[category];
        const completedInCategory = categoryLessons.filter(lesson => 
            appData.completedLessons.includes(lesson.id)
        ).length;
        
        const completionElement = document.getElementById(`${category}-completion`);
        const barElement = document.getElementById(`${category}-bar`);
        
        if (completionElement && barElement) {
            const percentage = categoryLessons.length > 0 
                ? (completedInCategory / categoryLessons.length) * 100 
                : 0;
            
            completionElement.textContent = `${completedInCategory}/${categoryLessons.length}`;
            barElement.style.width = `${percentage}%`;
        }
    });
}












